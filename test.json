<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Blog Manager</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 p-6">
  <div class="max-w-3xl mx-auto bg-white p-6 rounded-xl shadow">
    <h1 class="text-2xl font-bold mb-4">Blog Manager</h1>
    <button id="new-post-btn" class="mb-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
      Write New
    </button>

    <div id="posts-list" class="space-y-4"></div>

    <!-- Post Form (hidden by default) -->
    <div id="post-form" class="hidden mt-8">
      <h2 id="form-title" class="text-xl font-semibold mb-2">New Post</h2>
      <div class="space-y-4">
        <input id="post-title" type="text" placeholder="Title"
               class="w-full border px-3 py-2 rounded"/>
        <textarea id="post-content" rows="6" placeholder="Content (Markdown ok)"
                  class="w-full border px-3 py-2 rounded"></textarea>
        <div>
          <label class="block mb-1">Image (optional):</label>
          <input id="post-image" type="file" accept="image/*" />
        </div>
        <div class="flex space-x-2">
          <button id="save-btn"
                  class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600">
            Save
          </button>
          <button id="cancel-btn"
                  class="bg-gray-400 text-white px-4 py-2 rounded hover:bg-gray-500">
            Cancel
          </button>
        </div>
      </div>
    </div>
  </div>

  <script>
  // ─── CONFIG ──────────────────────────────────────────────────────────
  const GITHUB_TOKEN   = 'ghp_…';    // your GitHub PAT
  const OWNER           = 'notsopreety';
  const REPO            = 'blogs';
  const BRANCH          = 'main';
  const POSTS_PATH      = 'blog.json';
  const PUBLIC_IMG_DIR  = 'public/images';

  // ─── HELPERS ─────────────────────────────────────────────────────────
  async function githubRequest(method, path, body = null) {
    const url = `https://api.github.com/repos/${OWNER}/${REPO}/contents/${path}`;
    const opts = {
      method,
      headers: {
        Authorization: `Bearer ${GITHUB_TOKEN}`,
        Accept: 'application/vnd.github+json'
      },
    };
    if (body) opts.body = JSON.stringify(body);
    const res = await fetch(url + `?ref=${BRANCH}`, opts);
    if (!res.ok) throw await res.json();
    return res.json();
  }

  async function getPostsFile() {
    const data = await githubRequest('GET', POSTS_PATH);
    return {
      sha:     data.sha,
      content: JSON.parse(atob(data.content))
    };
  }

  async function updatePostsFile(posts, sha) {
    const b64 = btoa(JSON.stringify(posts, null, 2));
    const payload = {
      message: sha ? 'Update posts' : 'Create posts',
      content: b64,
      branch:  BRANCH,
      ...(sha && { sha })
    };
    return githubRequest('PUT', POSTS_PATH, payload);
  }

  async function uploadImage(file) {
    const arrayBuf = await file.arrayBuffer();
    const b64 = btoa(String.fromCharCode(...new Uint8Array(arrayBuf)));
    const path = `${PUBLIC_IMG_DIR}/${Date.now()}-${file.name}`;
    await githubRequest('PUT', path, {
      message: `Upload image ${file.name}`,
      content: b64,
      branch:  BRANCH
    });
    return `https://raw.githubusercontent.com/${OWNER}/${REPO}/${BRANCH}/${path}`;
  }

  // ─── UI LOGIC ─────────────────────────────────────────────────────────
  let posts = [], postsSha = null, editIndex = null;
  const listEl    = document.getElementById('posts-list');
  const formEl    = document.getElementById('post-form');
  const titleEl   = document.getElementById('post-title');
  const contentEl = document.getElementById('post-content');
  const imageEl   = document.getElementById('post-image');
  const formTitle = document.getElementById('form-title');

  function renderPosts() {
    listEl.innerHTML = '';
    posts.forEach((p, i) => {
      const card = document.createElement('div');
      card.className = 'p-4 border rounded shadow-sm bg-gray-50';
      card.innerHTML = `
        <h3 class="text-lg font-semibold">${p.title}</h3>
        ${p.image ? `<img src="${p.image}" class="my-2 max-h-40"/>` : ''}
        <p class="mb-2">${p.content}</p>
        <div class="space-x-2">
          <button data-i="${i}" class="edit-btn bg-yellow-400 px-3 py-1 rounded">Edit</button>
          <button data-i="${i}" class="del-btn bg-red-500 text-white px-3 py-1 rounded">Delete</button>
        </div>`;
      listEl.appendChild(card);
    });
    document.querySelectorAll('.edit-btn').forEach(b =>
      b.addEventListener('click', e => openForm('edit', +e.target.dataset.i))
    );
    document.querySelectorAll('.del-btn').forEach(b =>
      b.addEventListener('click', async e => {
        const idx = +e.target.dataset.i;
        if (!confirm('Delete this post?')) return;
        posts.splice(idx, 1);
        const res = await updatePostsFile(posts, postsSha);
        postsSha = res.content.sha;
        await loadPosts();
      })
    );
  }

  async function loadPosts() {
    const file = await getPostsFile();
    posts = file.content;
    postsSha = file.sha;
    renderPosts();
  }

  function openForm(mode, idx = null) {
    editIndex = idx;
    formTitle.textContent = mode === 'edit' ? 'Edit Post' : 'New Post';
    formEl.classList.remove('hidden');
    titleEl.value   = mode === 'edit' ? posts[idx].title   : '';
    contentEl.value = mode === 'edit' ? posts[idx].content : '';
    imageEl.value   = '';
  }

  document.getElementById('new-post-btn')
          .addEventListener('click', () => openForm('new'));

  document.getElementById('cancel-btn')
          .addEventListener('click', () => formEl.classList.add('hidden'));

  document.getElementById('save-btn').addEventListener('click', async () => {
    const title   = titleEl.value.trim();
    const content = contentEl.value.trim();
    if (!title || !content) return alert('Title & content are required.');

    let imageUrl = editIndex !== null && posts[editIndex].image
                 ? posts[editIndex].image
                 : null;

    if (imageEl.files.length) {
      imageUrl = await uploadImage(imageEl.files[0]);
    }

    const newPost = { title, content, image: imageUrl };
    if (editIndex !== null) {
      posts[editIndex] = newPost;
    } else {
      posts.push(newPost);
    }

    const res = await updatePostsFile(posts, postsSha);
    postsSha = res.content.sha;
    editIndex = null;
    formEl.classList.add('hidden');
    await loadPosts();
  });

  // ─── INITIALIZE ────────────────────────────────────────────────────────
  loadPosts().catch(e => alert('Error loading posts: ' + JSON.stringify(e)));
  </script>
</body>
</html>
